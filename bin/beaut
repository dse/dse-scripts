#!/usr/bin/env perl
use warnings;
use strict;
use open IO => qw(:locale);

my $parser = My::Parser->new();
while (<>) {
    $parser->parse($_);
} continue {
    if (eof) {
        $parser->eof();
        print $parser->{html};
        $parser = My::Parser->new(unbroken_text => 1);
    }
}

package My::Parser {
    use HTML::Tagset;
    use HTML::Entities;
    use base "HTML::Parser";
    sub new {
        my ($class, @args) = @_;
        my $self = $class->SUPER::new(
            @args,
            unbroken_text => 1,
            start_h       => [\&start,       "self, text, tagname, attr, attrseq"],
            end_h         => [\&end,         "self, text, tagname"],
            text_h        => [\&text,        "self, text, is_cdata"],
            process_h     => [\&process,     "self, text, tokens"],
            comment_h     => [\&comment,     "self, text, tokens"],
            declaration_h => [\&declaration, "self, text"],
        );
        $self->{html} = "";
        $self->{indent} = 4;
        $self->{indent_level} = 0;
        $self->{stack} = [];
        $self->{is_block} = 1;
        return $self;
    }
    our %EMPTY;                 # hr, img, etc.
    our %BOOLEAN;
    our %PHRASAL;               # span, abbr, acronym, etc. -- not <p>, etc.
    our %FORM;                  # input, textarea, etc.
    our %BLOCK;
    our %VERBATIM;
    BEGIN {
        %EMPTY = %HTML::Tagset::emptyElement;
        %BOOLEAN = %HTML::Tagset::boolean_attr;
        foreach my $key (keys %BOOLEAN) {
            $BOOLEAN{$key} = { $BOOLEAN{$key} => 1 } if ref $BOOLEAN{$key} eq '';
        }
        %PHRASAL = %HTML::Tagset::isPhraseMarkup;
        %FORM = %HTML::Tagset::isFormElement;
        %BLOCK = %HTML::Tagset::isBodyElement;
        %VERBATIM = (
            textarea => 1,
            pre => 1,
            script => 1,
        );
    }
    sub indent {
        my ($self) = @_;
        return " " x ($self->{indent_level} * $self->{indent});
    }
    sub start {
        my ($self, $text, $tagname, $attr, $attrseq) = @_;

        my $was_collapse = $self->collapse;
        my $will_collapse = $self->collapse(pop => 1);
        # $self->emit(sprintf("[%s/%s]", $was_collapse, $will_collapse));

        if (!$self->collapse && !$self->verbatim) {
            $self->emit($self->indent);
        }
        $self->emit($text);
        if (!is_empty_element($tagname)) {
            $self->{indent_level} += 1;
            push(@{$self->{stack}}, $tagname);
        }
        if (!$self->collapse && !$self->verbatim) {
            $self->emit("\n");
        }
    }
    sub end {
        my ($self, $text, $tagname) = @_;
        if (!scalar @{$self->{stack}}) {
            die("too many closing tags");
        }
        $self->{indent_level} -= 1;

        my $was_collapse = $self->collapse;
        my $will_collapse = $self->collapse(pop => 1);
        # $self->emit(sprintf("[%s/%s]", $was_collapse, $will_collapse));

        if (!$self->collapse && !$self->verbatim) {
            $self->emit($self->indent);
        }
        $self->emit($text);

        my $opened = pop(@{$self->{stack}});
        if ($opened ne $tagname) {
            die("incorrect closing tag $text (expected </$opened>)");
        }

        if (!$self->collapse && !$self->verbatim) {
            $self->emit("\n");
        }

    }
    sub text {
        my ($self, $text, $is_cdata) = @_;
        if ($self->verbatim) {
            $self->emit($text);
            return;
        }
        if ($text !~ /\S/ && length($text)) {
            if ($self->collapse) {
                $self->emit(' ');
            }
        } else {
            my $leading_space;
            my $trailing_space;
            if (!$self->verbatim) {
                $text =~ s{\A\s*}{}s;
                $leading_space = length($&) ? $& : undef;
                $text =~ s{\s*\z}{}s;
                $trailing_space = length($&) ? $& : undef;
            }
            if (!$self->collapse && !$self->verbatim) {
                $self->emit($self->indent);
            }
            $self->emit(' ') if $self->collapse && defined $leading_space;
            $text =~ s{(\R)\s*}{$1 . $self->indent}gme;
            $self->emit($text);
            $self->emit(' ') if $self->collapse && defined $trailing_space;
            if (!$self->collapse && !$self->verbatim) {
                $self->emit("\n");
            }
        }
    }
    sub process {
        my ($self, $text, $tokens) = @_;
        if (!$self->collapse && !$self->verbatim) {
            $self->emit($self->indent);
        }
        $self->emit($text);
        if (!$self->collapse && !$self->verbatim) {
            $self->emit("\n");
        }
    }
    sub comment {
        my ($self, $text, $tokens) = @_;
        if (!$self->collapse && !$self->verbatim) {
            $self->emit($self->indent);
        }
        $self->emit($text);
        if (!$self->collapse && !$self->verbatim) {
            $self->emit("\n");
        }
    }
    sub declaration {
        my ($self, $text) = @_;
        if (!$self->collapse && !$self->verbatim) {
            $self->emit($self->indent);
        }
        $self->emit($text);
        if (!$self->collapse && !$self->verbatim) {
            $self->emit("\n");
        }
    }
    sub emit {
        my ($self, $text) = @_;
        $self->{html} .= $text;
    }
    sub clean_tag {
        my ($tagname, $attr, $attrseq) = @_;
        my $str = "<" . $tagname;
        foreach my $attr_name (@$attrseq) {
            my $attr_value = $attr->{$attr_name};
            if (is_boolean_attr($tagname, $attr_name)) {
                $str .= sprintf(' %s', $attr_name);
            } else {
                $str .= sprintf(' %s="%s"', $attr_name, encode_entities($attr_value));
            }
        }
        if (is_empty_element($tagname)) {
            $str .= ' />';
        } else {
            $str .= '>';
        }
        return $str;
    }
    sub is_empty_element {
        my ($tagname) = @_;
        return $EMPTY{$tagname};
    }
    sub is_boolean_attr {
        my ($tagname, $attr_name) = @_;
        my $boolean = $BOOLEAN{$tagname};
        return if !defined $boolean;
        return 1 if ref $boolean eq '' && $boolean eq $attr_name;
        return 1 if ref $boolean eq 'HASH' && $boolean->{$attr_name};
        return;
    }
    sub is_phrasal_element {
        my ($tagname) = @_;
        return $PHRASAL{$tagname};
    }
    sub is_form_element {
        my ($tagname) = @_;
        return $FORM{$tagname};
    }
    sub collapse {
        my ($self, %args) = @_;
        my @stack = @{$self->{stack}};
        if (defined $args{push}) {
            push(@stack, $args{push});
        }
        if (defined $args{pop}) {
            pop(@stack);
        }
        foreach my $tag (reverse @stack) {
            return 1 if $PHRASAL{$tag};
        }
        return;
    }
    sub verbatim {
        my ($self, $tagname) = @_;
        if (defined $tagname) {
            return $VERBATIM{$tagname};
        }
        foreach my $tag (reverse @{$self->{stack}}) {
            return 1 if $VERBATIM{$tag};
        }
        return;
    }
}
;
