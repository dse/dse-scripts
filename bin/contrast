#!/usr/bin/env perl
use warnings;
use strict;
use List::Util qw(max min all);

my $color_1 = shift(@ARGV);
my $color_2 = shift(@ARGV);

my ($r1, $g1, $b1) = parse_color_string($color_1);
my ($r2, $g2, $b2) = parse_color_string($color_2);

my $contrast = contrast([$r1, $g1, $b1], [$r2, $g2, $b2]);
printf("%.3f\n", $contrast);

sub contrast {
    if (scalar @_ == 2 && ref $_[0] eq 'ARRAY' && ref $_[1] eq 'ARRAY') {
        my ($c1, $c2) = @_;
        my $lum1 = lum($c1);
        my $lum2 = lum($c2);
        my $lum_max = max($lum1, $lum2);
        my $lum_min = min($lum1, $lum2);
        return ($lum_max + 0.05) / ($lum_min + 0.05);
    }
    die("contrast: invalid arguments\n");
}

sub lum {
    if (scalar @_ == 1) {
        my ($x) = @_;
        if (ref $x eq '') {
            $x = clamp($x, 0, 1);
            if ($x <= 0.03928) {
                return $x / 12.92;
            }
            return (($x + 0.055) / 1.055) ** 2.4;
        }
        if (ref $x eq 'ARRAY' && all { ref $_ eq '' } @$x) {
            if (scalar @$x == 3) {
                return lum(@$x);
            }
        }
    }
    if (scalar @_ == 3 && all { ref $_ eq '' } @_) {
        my ($r, $g, $b) = map { clamp($_, 0, 1) } @_;
        return 0.2126 * lum($r) + 0.7152 * lum($g) + 0.0722 * lum($b);
    }
    die("lum: invalid arguments\n");
}

sub parse_color_string {
    my ($str) = @_;
    return if !defined $str;
    if ($str =~ /^#([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})$/) {
        my $r = hex($1)/255;
        my $g = hex($2)/255;
        my $b = hex($3)/255;
        return ($r, $g, $b) if wantarray;
        return [$r, $g, $b];
    }
    die("invalid color string: $str\n");
}

sub clamp {
    my ($x, $low, $high) = @_;
    return $x < $low ? $low : $x > $high ? $high : $x;
}
